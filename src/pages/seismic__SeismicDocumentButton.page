<apex:page controller="seismic.SeismicDocumentButtonController" action="{!init}">
    <apex:stylesheet value="{!URLFOR($Resource.seismic__SeismicAdmin)}"/>
	<apex:stylesheet value="{!URLFOR($Resource.seismic__jquery_ui_1_13_2_min_css)}"/>

    <script type="text/javascript">
	    window.$Label = window.$Label || {};
        $Label.commonOk = '{!JSENCODE($Label.commonOk)}';

        function format(string) {
          	var outerArguments = arguments;
          	return string.replace(/\{(\d+)\}/g, function () {
            	return outerArguments[parseInt(arguments[1]) + 1];
          	});
        }

    </script>
    <script type="text/javascript" src="{!URLFOR($Resource.SeismicAdminSetting)}"></script>
    <apex:includeScript value="{!URLFOR($Resource.seismic__jquery_3_6_1_min_js)}" />
    <apex:includeScript value="{!URLFOR($Resource.seismic__jquery_ui_1_13_2_min_js)}" />
	<style type="text/css">
			.ui-autocomplete-loading { background: white url('{!URLFOR($Resource.AjaxLoad_GIF)}') right center no-repeat; }
	</style>


    <script>
    	jQuery.noConflict();

        function disableAllButtons() {
            var allBtns = [].slice.apply(document.getElementsByClassName("btn"));

            for (var i = 0; i < allBtns.length; i++) {
                var btn = allBtns[i];
                if (btn) {
                    btn.className = 'btnDisabled';
                    btn.disabled = 'disabled';
                }
            }
        }

        function enableAllButtons() {
            var allBtns = [].slice.apply(document.getElementsByClassName("btnDisabled"));

            for (var i = 0; i < allBtns.length; i++) {
                var btn = allBtns[i];
                if (btn) {
                    btn.className = 'btn';
                    btn.removeAttribute('disabled');
                }
            }
        }
    	
		function showError(msg) {
            showGlobalMessage('error', msg);
        }

        function checkCanDelete(objectDisplayName, buttonName, buttonApiName, objectTypeMappingInstanceName, visualforcePageId) {
            var msg = '';
            if(buttonName && objectDisplayName) {
                msg = format('{!$Label.messageConfirmDeleteObject}', buttonName, objectDisplayName);
            } else {
                msg = '{!$Label.messageConfirmDelete}';
            }

            if (window.confirm(msg)) {
                deleteObjectTypeMapping();
            }
        }
    </script>
   
    <apex:form id="editObjectMapping">
        <apex:actionFunction name="showGlobalMessage" action="{!showGlobalMessage}" rerender="messages" immediate="true" oncomplete="enableAllButtons&&enableAllButtons()">
            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
        </apex:actionFunction>
        <apex:sectionHeader id="editHeader" title="{!IF(isEditObjectDocMapping || isEditObjectNewDocMapping, $Label.seismic__commonDocumentButton, $Label.seismic__legacyHeaderFolderButton)}" subtitle="{!IF(NOT(ISBLANK(newObjectTypeMapping.seismic__Object_Label__c)), newObjectTypeMapping.seismic__Object_Label__c, newObjectTypeMapping.seismic__Object_Name__c)}" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}"/>
        <apex:sectionHeader id="newHeader" title="{!IF(isEditObjectDocMapping || isEditObjectNewDocMapping, $Label.seismic__commonDocumentButton, $Label.seismic__legacyHeaderFolderButton)}" subtitle="{!$Label.seismic__legacyHeaderFolderButtonSubtitle}" rendered="{!ISNULL(newObjectTypeMapping.Id)}"/>
        <apex:pageMessages id="messages" escape="false" />
        <apex:pageBlock id="settings" title="{!IF(isEditObjectDocMapping||isEditObjectNewDocMapping, $Label.seismic__legacyEditDocumentButtonHeader, $Label.seismic__legacyEditFolderButtonHeader)}" rendered="{!objectTypeMappingAccessable}">
            <apex:pageBlockButtons id="buttons" >
                <script type="text/javascript">
                    function getMissedFields () {
                        var fieldsToCheck = {};

                        if({!isEditObjectDocMapping || isEditObjectNewDocMapping}) {
                            fieldsToCheck[buttonNameId] = '{!$Label.seismic__commonButtonName}';
                            if({!ISNULL(newObjectTypeMapping.Id)}) {
                                fieldsToCheck[objectName] = '{!$Label.seismic__commonRelated}';
                            }

                            fieldsToCheck[teamSite] = '{!$Label.seismic__commonProfile}';
                            fieldsToCheck[documentName] = '{!$Label.seismic__commonDocumentPath}';
                        } else {
                            fieldsToCheck[buttonNameId] = '{!$Label.seismic__commonButtonName}';
                            if({!ISNULL(newObjectTypeMapping.Id)}) {
                                fieldsToCheck[objectName] = '{!$Label.seismic__commonRelated}';
                            }

                            fieldsToCheck[teamSite] = '{!$Label.seismic__commonProfile}';
                        }

                        var missedFields = [];
                        for(var id in fieldsToCheck) {
                            var label = fieldsToCheck[id];

                            var input = document.getElementById(id);
                            if(!input) continue;

                            var value = input.value;
                            if(!value) {
                                missedFields.push(label);
                            }
                        }

                        return missedFields;
                    }

                    function findButtonInMappings(isUpdate, objMappings, currentObjectName, buttonLabel, buttonValue) {
                        for (var i = 0; i < objMappings.length; i++) {
                            var dm = objMappings[i];
                            dm['{!JSENCODE(PACKAGE_NAME)}' + 'Button_Name__c'] = dm['{!JSENCODE(PACKAGE_NAME)}' + 'Button_Name__c'] || "";
                            dm['{!JSENCODE(PACKAGE_NAME)}' + 'Button_Name__c'] = dm['{!JSENCODE(PACKAGE_NAME)}' + 'Button_Name__c'].toLowerCase();
                            buttonLabel = buttonLabel || "";
                            buttonLabel = buttonLabel.toLowerCase();
                            if (dm['{!JSENCODE(PACKAGE_NAME)}' + 'Object_Name__c'] == currentObjectName && dm['{!JSENCODE(PACKAGE_NAME)}' + 'Button_Name__c'] == buttonLabel) {
                                if(isUpdate) {
                                    if(buttonValue != dm['{!JSENCODE(PACKAGE_NAME)}' + 'Button_Value__c']) {
                                        return true;
                                    }
                                } else {
                                    return true;
                                }
                            }
                        }

                        return false;
                    }

                    function hasDuplicateButton(isUpdate) {
                        return false;
                    }

                    function getButtonLabel() {
                        var input = document.getElementById(buttonNameId);

                        return input && input.value;
                    }

                    function getButtonValue() {
                        var input = document.getElementById(buttonValueId);

                        return input && input.value;
                    }

                    function checkAndSaveButton(callback) {
                        disableAllButtons();
                        var missedFields = getMissedFields();
                        if(missedFields.length > 0) {
                            showError(format('{!$Label.messageEmptyField}', missedFields.join(', ')));
                            return false;
                        }

                        var dupliate = hasDuplicateButton();
                        if ('EXCEPTION' == dupliate) {
                            enableAllButtons();
                            return false;
                        } else if(dupliate) {
                            showError('{!$Label.messageButtonExists}');
                            return false;
                        }
                        callback();
                    }

                    function checkAndUpdateButton(callback) {
                        disableAllButtons();
                        var missedFields = getMissedFields();
                        if(missedFields.length > 0) {
                          	showError(format('{!$Label.messageEmptyField}', missedFields.join(', ')));
                            return false;
                        }

                        var dupliate = hasDuplicateButton(true);
                        if('EXCEPTION' == dupliate) {
                            enableAllButtons();
                            return false;
                        } else if(dupliate) {
                          	showError('{!$Label.messageButtonExists}');
                            return false;
                        }

                        callback();
                    }
                </script>
                <apex:actionFunction name="deleteObjectTypeMapping" action="{!deleteObjectTypeMapping}" rerender="messages" immediate="true" oncomplete="enableAllButtons&&enableAllButtons()">
		        </apex:actionFunction>
                <apex:actionFunction action="{!saveNewObjectTypeMapping}" name="saveNewObjectTypeMapping" />
                <apex:commandButton id="saveButton" value="{!$Label.seismic__buttonSave}" rendered="{!ISNULL(newObjectTypeMapping.Id) && objectTypeMappingInsertable}" onclick="checkAndSaveButton(saveNewObjectTypeMapping);return false;"/>
                <apex:actionFunction action="{!updateObjectTypeMapping}" name="updateObjectTypeMapping" />
                <apex:commandButton id="updateButton" value="{!$Label.seismic__buttonSave}" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable}" onclick="checkAndUpdateButton(updateObjectTypeMapping);return false;"/>
                <apex:commandButton id="deleteButton" value="{!$Label.seismic__buttonDelete}" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingDeleteable}" onclick="checkCanDelete(null, null, '{!JSINHTMLENCODE(newObjectTypeMapping.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(newObjectTypeMapping.Name)}', '{!JSINHTMLENCODE(newObjectTypeMapping.seismic__Related_Visualforce_Page_Name__c)}'); return false;" />
                <apex:commandButton id="cancelButton" action="{!backToList}" value="{!$Label.seismic__buttonCancel}" immediate="true"/>
            </apex:pageBlockButtons>

            <apex:outputPanel rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable}">
                <script>
                    function createdVisualforcePage(visualforcePage) {
                      	showMessage('info', format('{!$Label.messageCreateVfPage}', '<a target="_blank" href="/09D/e?type={!JSENCODE(newObjectTypeMapping.Object_Name__c)}&setupid={!JSENCODE(newObjectTypeMapping.Object_Name__c)}Links&PageOrSobjectType={!JSENCODE(newObjectTypeMapping.Object_Name__c)}&retURL=">', '</a>'));
                    }
                </script>
            </apex:outputPanel>
            <apex:outputPanel rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable && ISBLANK(newObjectTypeMapping.seismic__Related_Visualforce_Page_Name__c)}">
                <apex:actionFunction name="showMessage" action="{!showMessage}" rerender="messages" immediate="true">
                    <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
                    <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
                </apex:actionFunction>
            </apex:outputPanel>

            <apex:pageBlockSection id="settings" columns="1">
                <apex:pageBlockSectionItem id="buttonName">
                    <apex:outputLabel value="{!$Label.seismic__commonButtonName}" for="newButtonName" id="label"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Button_Name__c}" id="newButtonName" style="width:250px"/>
                        <apex:inputHidden value="{!newObjectTypeMapping.seismic__Button_Value__c}" id="newButtonValue" />
                        <script>
                            var buttonNameId = '{!$Component.newButtonName}';
                            var buttonValueId = '{!$Component.newButtonValue}';
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem id="pageForAction" rendered="{NOT(ISBLANK(newObjectTypeMapping.Related_Visualforce_Page_Name__c))}">
                    <apex:outputLabel id="label" value="{!$Label.seismic__commonVfPageForAction}" />
                    <apex:outputpanel layout="block">{!newObjectTypeMapping.seismic__Related_Visualforce_Page_Name__c}</apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem id="relatedObject" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}">
                    <apex:outputLabel value="{!$Label.seismic__commonRelated}" for="newObjectType"/>
                    <apex:outputpanel layout="block">{!newObjectTypeMapping.Object_Label__c}
                        <script>
                            function getCurrentObjectName() {
                                return '{!JSENCODE(newObjectTypeMapping.Object_Name__c)}';
                            }
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem id="relatedObjectList" rendered="{!ISNULL(newObjectTypeMapping.Id)}">
                    <apex:outputLabel value="{!$Label.seismic__commonRelated}" for="newObjectType"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"></apex:outputpanel>
                        <apex:inputtext id="accountSearch" value="{!searchTerm}" html-placeholder="Begin typing to search for related object" style="width:250px"/> 
                        <apex:inputHidden id="objectTypeSelectorHidden" value="{!newObjectTypeMapping.seismic__Object_Name__c}"/>
                        <script type="text/javascript">
                            var objectName = '{!$Component.objectTypeSelectorHidden}';
                            function getCurrentObjectName() {
                                var input = document.getElementById(objectName);
                                return input && input.value;
                            }

                            jQuery(function() {  
								jQuery("input[id$='accountSearch']").autocomplete({  
                                    minLength: 2,  
                                    source: function(request, response) {  
										var searchString = request.term;  
										Visualforce.remoting.Manager.invokeAction(
											'{!$RemoteAction.SeismicDocumentButtonController.getSearchSuggestions}', searchString , function(result, event) {  
											if(event.status) {  
												if (typeof result === 'undefined' || result.length <=0) {  
													response(['No Record Found']);  
												} else {  
													response(result);  
												}  
											} else {  
												response([]);  
											}  
										});  
								    },  
                                    select: function(event, ui){  
                                            if(ui.item.label != 'No Record Found'){  
                                                jQuery("input[id$='accountSearch']").val(ui.item.label);
                                                document.getElementById('{!$Component.objectTypeSelectorHidden}').value = ui.item.value;
                                            }  
                                            return false;  
                                    },  
                                    focus: function( event, ui ) {  
                                            jQuery("input[id$='accountSearch']").val(ui.item.label);  
                                            return false;  
                                    }  
                                }); 
                            });
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageblocksectionitem id="profile">
                    <apex:outputLabel id="profileLabel" value="{!$Label.seismic__commonProfile}" for="newTeamSite"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Team_Site__c}" id="newTeamSite"  style="width:250px"/>
                        <script>
                            var teamSite = '{!$Component.newTeamSite}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>
                <apex:pageblocksectionitem id="documentPath">
                    <apex:outputLabel id="label" value="{!$Label.seismic__commonDocumentPath}" for="newDocumentName"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Document_Name__c}" id="newDocumentName"  style="width:250px"/>
                        <script>
                            var documentName = '{!$Component.newDocumentName}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>
            </apex:pageBlockSection>
        </apex:pageBlock>
    </apex:form>
</apex:page>